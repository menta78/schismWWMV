#!/usr/bin/perl -w
use POSIX qw(ceil floor);
sub round {
    my($number) = shift;
    return int($number + .5);
}
sub fix {
    my($number) = shift;
    if ($number > 0)
    {
	return floor($number);
    }
    else
    {
	return -floor(-$number);
    }
}
sub num2strPerso {
    my($number) = shift;
    my $rndA=round($number);
    if ($rndA < 10)
    {
	return "0".$rndA;
    }
    else
    {
	return $rndA;
    }
}


sub IsBissextile {
    my($number) = shift;
    $rnd1=round($number/4);
    if (4*$rnd1 eq $number)
    {
	if ($number eq 1900)
	{
	    return 0;
	}
	if ($number eq 2000)
	{
	    return 1;
	}
	if ($number eq 2100)
	{
	    return 0;
	}
	return 1;
    }
    else
    {
	return 0;
    }
}

sub Freduction($$)
{
    my ($val1, $val2) = @_;
    if ($val1 eq "0")
    {
	return $val2;
    }
    else
    {
	return $val1.$val2;
    }
}




sub DateComparison($$)
{
    my ($str1, $str2)=@_;
    my ($year1, $year2);
    my ($month1, $month2);
    my ($day1, $day2);
    my ($hour1, $hour2);
    my ($minute1, $minute2);
    my ($second1, $second2);
#    print "str1=".$str1."   str2=".$str2."\n";
    @SPL1=split("_", $str1);
    @SU1=split("", $SPL1[0]);
    $year1=$SU1[0].$SU1[1].$SU1[2].$SU1[3];
    $month1=Freduction($SU1[4], $SU1[5]);
    $day1=Freduction($SU1[6], $SU1[7]);
    #
    @SU1=split("", $SPL1[1]);
    $hour1=Freduction($SU1[0], $SU1[1]);
    $minute1=Freduction($SU1[2], $SU1[3]);
    $second1=Freduction($SU1[4], $SU1[5]);
#    print "year1=".$year1." month1=".$month1." day1=".$day1." hour1=".$hour1." minute1=".$minute1." second1=".$second1."\n";


    @SPL2=split("_", $str2);
    @SU1=split("", $SPL2[0]);
    $year2=$SU1[0].$SU1[1].$SU1[2].$SU1[3];
    $month2=Freduction($SU1[4], $SU1[5]);
    $day2=Freduction($SU1[6], $SU1[7]);
    #
    @SU1=split("", $SPL2[1]);
    $hour2=Freduction($SU1[0], $SU1[1]);
    $minute2=Freduction($SU1[2], $SU1[3]);
    $second2=Freduction($SU1[4], $SU1[5]);
#    print "year2=".$year2." month2=".$month2." day2=".$day2." hour2=".$hour2." minute2=".$minute2." second2=".$second2."\n";

#    print "We are here\n";
    if ($year1 < $year2)
    {
	return 1;
    }
    elsif ($year1> $year2)
    {
	return -1;
    }
    if ($month1 < $month2)
    {
	return 1;
    }
    elsif ($month1> $month2)
    {
	return -1;
    }
    if ($day1 < $day2)
    {
	return 1;
    }
    elsif ($day1> $day2)
    {
	return -1;
    }

    if ($hour1 < $hour2)
    {
	return 1;
    }
    elsif ($hour1> $hour2)
    {
	return -1;
    }
    if ($minute1 < $minute2)
    {
	return 1;
    }
    elsif ($minute1> $minute2)
    {
	return -1;
    }
    if ($second1 < $second2)
    {
	return 1;
    }
    elsif ($second1> $second2)
    {
	return -1;
    }
    return 0;
}




sub mjd2date($)
{
    # input should be in days from 1968-05-23 00:00:00 GMT
    my ($nbDay)=@_;
    $jd=$nbDay+2440000-0.5;
    
    $ijd=floor($jd + 0.5);
    $fjd=$jd - $ijd + 0.5;
    
    $days=$fjd;
    
    $second = 86400 * $days;
    $hour   = fix($second/3600);
    $second = $second - 3600*$hour;
    $minute = fix($second/60);
    $second = $second - 60*$minute;
    
    $a = $ijd + 32044;
    $b = floor((4 * $a + 3) / 146097);
    $c = $a - floor(($b * 146097) / 4);
    
    $d = floor((4 * $c + 3) / 1461);
    $e = $c - floor((1461 * $d) / 4);
    $m = floor((5 * $e + 2) / 153);
    
    $day   = $e - floor((153 * $m + 2) / 5) + 1;
    $month = $m + 3 - 12 * floor($m / 10);
    $year  = $b * 100 + $d - 4800 + floor($m / 10);
    return ($year, $month, $day, $hour, $minute, $second);
}

sub date2mjd($$$$$$)
{
    #copied from matlab script
    my ($year, $month, $day, $hour, $minute, $second)=@_;
    $a = floor((14 - $month)/12);
    $y = $year + 4800 - $a;
    $m = $month + 12*$a - 3;
    $jd = $day + floor((153*$m + 2)/5) + $y*365 + floor($y/4) - floor($y/100) + floor($y/400) - 32045 + ( $second + 60*$minute + 3600*($hour - 12) )/86400;
    $mjd=$jd-2400000.5;
    return $mjd;
}

sub persoDate2mjd($$$$$$)
{
    my ($year, $month, $day, $hour, $minute, $second)=@_;
    $VAL1=date2mjd($year, $month, $day, $hour, $minute, $second);
    $VAL2=date2mjd(1968, 5, 23,   0, 0, 0);
    $VAL3=$VAL1-$VAL2;
    return $VAL3;
}


# simple tests and it looks ok
#$mjd=persoDate2mjd(2003,01,20,05,36,58);
#print "mjd=".$mjd."\n";
#($year, $month, $min, $hour, $min, $sec)=mjd2date(12660);
#print "year=".$year." month=".$month." day=".$day."\n";
#print "hour=".$hour." min=".$min." sec=".$sec."\n";

# This script update the list of Mercator data
# The prefix
$TheIfrePrefix="ftp://ftp.ifremer.fr/ifremer/cersat/products/swath/altimeters/waves/data/";
# $TheStorPrefix="/mnt/KitData/model/ROMS/Experiment/AltimeterData/";
$ALTI_ENVI='ALTIMETER_DIRECTORY';
$TheStorPrefix=$ENV{$ALTI_ENVI};

print "TheIfrePrefix=".$TheIfrePrefix."\n";
print "TheStorPrefix=".$TheStorPrefix."\n";

$uu=scalar(@ARGV);
if ($uu ne 2)
{
    print "DownloadAltimeterIfremer is used as\n";
    print "DownloadAltimeterIfremer BeginTime EndTime\n";
    print "time format is 2009-12-25\n";
    print "data is downloaded from IFREMER:\n";
    print $TheIfrePrefix."\n";
    print "and stored at\n";
    print $TheStorPrefix."\n";
    print "(environment variable ".$ALTI_ENVI.")\n"; 
    die;
}
$BeginTimeString=$ARGV[0];
$EndTimeString=$ARGV[1];

@U1=split("-", $BeginTimeString);
$BeginTimeMJD=persoDate2mjd($U1[0], $U1[1], $U1[2], 0, 0, 0);
@U2=split("-", $EndTimeString);
$EndTimeMJD=persoDate2mjd($U2[0], $U2[1], $U2[2], 0, 0, 0);
print "BeginTimeMJD=".$BeginTimeMJD." EndTimeMJD=".$EndTimeMJD."\n";

for ($eDayMJD=$BeginTimeMJD; $eDayMJD<=$EndTimeMJD; $eDayMJD++)
{
    ($eYear, $eMonth, $eDay, $eHour, $eMin, $eSec)=mjd2date($eDayMJD);
    $strH=$eHour."_".$eMin."_".$eSec;
    if ($strH ne $strH)
    {
	die "We have reached deep absurdity";
    }
    $strMonth=num2strPerso($eMonth);
    $strDay=num2strPerso($eDay);
    $eFileS="wm_".$eYear.$strMonth.$strDay.".nc";
    $eFileSbz=$eFileS.".bz2";
    $eFileStor=$TheStorPrefix.$eYear."/".$strMonth."/".$eFileS;
    $eFileStorGz=$TheStorPrefix.$eYear."/".$strMonth."/".$eFileSbz;
    #
    $TheFile1=$TheIfrePrefix.$eYear."/".$strMonth."/".$eFileSbz;
    if (-e $eFileStor || -e $eFileStorGz)
    {
	print "file ".$eFileStor." already exists\n";
    }
    else
    {
	print "file ".$eFileStor." does not exists\n";
	#
	$order="mkdir -p ".$TheStorPrefix.$eYear;
	print $order."\n";
	if (system($order) != 0) {
	    die "Error in mkdir command\n";
	}
	#
	$TheDest=$TheStorPrefix.$eYear."/".$strMonth;
	$order="mkdir -p ".$TheDest;
	print $order."\n";
	if (system($order) != 0) {
	    die "Error in mkdir command\n";
	}
	#
	$order="(cd ".$TheDest." && ncftpget ".$TheFile1.")";
	print $order."\n";
	if (system($order) != 0) {
	    die "Error in ncftpget command\n";
	}
	#
	$order="(cd ".$TheDest." && bzip2 -d ".$eFileSbz.")";
	print $order."\n";
	if (system($order) != 0) {
	    die "Error in bzip2 command\n";
	}
    }
}
print "File downloaded in ALTIMETRY_DIRECTORY = ".$TheStorPrefix."\n";
