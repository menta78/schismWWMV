    
    SUBROUTINE read_sed_input

        
!!======================================================================
!! September, 2007                                                     ! 
!!==========================================================Ligia Pinto=
!!                                                                     !
!! This subroutine reads sediment model inputs                         !
!!                                                                     ! 
!!======================================================================	 

!
      USE sed_param, only: rhom,r4,r8
      USE elfe_glbl, only: ntracers 
      USE elfe_msgp, only: myrank,parallel_abort
      USE sed_mod, only: Csed,Erate,Sd50,Srho,Wsed,poros,tau_ce,&
     &morph_fac,newlayer_thick,bedload_coeff      

!
      IMPLICIT NONE
      SAVE  

! Local variables

      CHARACTER(len=100) :: var1, var2
      INTEGER :: i, j, ierror
      allocate(Sd50(ntracers),stat=i)
      if(i/=0)call parallel_abort('main: Sd50 allocation failure')
      allocate(Csed(ntracers),stat=i)
      if(i/=0)call parallel_abort('main: Csed allocation failure')
      allocate(Srho(ntracers),stat=i)
      if(i/=0)call parallel_abort('main: Srho allocation failure')
      allocate(Wsed(ntracers),stat=i)
      if(i/=0)call parallel_abort('main: Wsed allocation failure')
      allocate(Erate(ntracers),stat=i)
      if(i/=0)call parallel_abort('main: Erate allocation failure')
      allocate(tau_ce(ntracers),stat=i)
      if(i/=0)call parallel_abort('main: tau_ce allocation failure')
!      allocate(tau_cd(ntracers),stat=i)
!      if(i/=0)call parallel_abort('main: tau_cd allocation failure')
      allocate(poros(ntracers),stat=i)
      if(i/=0)call parallel_abort('main: poros allocation failure')
      allocate(morph_fac(ntracers),stat=i)
      if(i/=0)call parallel_abort('main: morph_fac allocation failure')
      
      
      OPEN(5, file='sediment.in', status='old')
!      IF(ierror/=0) THEN
!        WRITE(*,*) 'Error opening sediment model input parameters (sediment.in)!'
!        STOP
!      END IF
      if(myrank==0) WRITE(16,*)'reading sediment.in' 
! Reads input
!----------------------------------------------------------------------------
!General sediment bed model controls.
!------------------------------------------------------------------------------

      DO j=1,50 !by-pass comments
        READ(5,*) var1
!        write(*,*) var1
      END DO
      
     READ(5,*) var1, var2, newlayer_thick
     if(myrank==0) write(*,*) var1, newlayer_thick      
      DO j=1,3
        READ(5,*) var1
!        write(*,*)var1
      END DO
      
     READ(5,*) var1, var2, bedload_coeff
     if(myrank==0) write(*,*)var1, bedload_coeff 
      DO j=1,6
        READ(5,*) var1
      END DO

!-----------------------------------------------------------------------------
!Non-cohesive Sediment Parameters, [1:NST] values expected.
!-----------------------------------------------------------------------------
!
     if(myrank==0) write(*,*)ntracers
     READ(5,*) var1, var2, (Sd50(i), i=1,ntracers)
     if(myrank==0) write(*,*) var1, (Sd50(i), i=1,ntracers)
     
      DO j=1,3
        READ(5,*) var1
      END DO
      
     READ(5,*) var1, var2, (Csed(i), i=1,ntracers)
     if(myrank==0) write(*,*)var1, (Csed(i), i=1,ntracers) 
      DO j=1,3
        READ(5,*) var1
!        write(*,*) var1
      END DO
      
     READ(5,*) var1, var2, (Srho(i), i=1,ntracers)  
     if(myrank==0) write(*,*) var1,  (Srho(i), i=1,ntracers) 
      DO j=1,3
        READ(5,*) var1
      END DO
      
     READ(5,*) var1, var2, (Wsed(i), i=1,ntracers)
     if(myrank==0) write(*,*) var1, (Wsed(i), i=1,ntracers) 
      DO j=1,3
        READ(5,*) var1
      END DO
      
     READ(5,*) var1, var2, (Erate(i), i=1,ntracers)
     if(myrank==0) write(*,*) var1, (Erate(i), i=1,ntracers) 
      DO j=1,3
        READ(5,*) var1
      END DO
      
     READ(5,*) var1, var2, (tau_ce(i), i=1,ntracers)
     if(myrank==0) write(*,*) var1, (tau_ce(i), i=1,ntracers) 
      DO j=1,3
        READ(5,*) var1
     END DO
 
     READ(5,*) var1, var2, (poros(i), i=1,ntracers)
     if(myrank==0) write(*,*) var1, (poros(i), i=1,ntracers) 
      DO j=1,3
        READ(5,*) var1
      END DO
      
!     READ(5,*) var1, var2, (tnu2(i), i=1,NST)
      
!      DO j=1,3
!        READ(5,*) var1
!      END DO
      
!     READ(5,*) var1, var2, (tnu4(i), i=1,NST)
      
!      DO j=1,3
!        READ(5,*) var1
!      END DO
      
!     READ(5,*) var1, var2, (Akt_bak, i=1,NST)
      
!      DO j=1,3
!        READ(5,*) var1
!      END DO
      
!     READ(5,*) var1, var2, (Tnudg(i), i=1,NST)
      
      DO j=1,15
        READ(5,*) var1
!        write(*,*)j,var1
      END DO
      
     READ(5,*) var1, var2, (morph_fac(i), i=1,ntracers)
     if(myrank==0) write(*,*)var1, (morph_fac(i), i=1,ntracers)    
     CLOSE(5)     
!-----------------------------------------------------------------------
!  Scale relevant input parameters
!-----------------------------------------------------------------------
!
      DO i=1,ntracers
        Sd50(i)=Sd50(i)*0.001_r8
        Wsed(i)=Wsed(i)*0.001_r8
        tau_ce(i)=tau_ce(i)/rhom
!        tau_cd(i)=tau_cd(i)/rhom
!        tnu4(idsed(i))=SQRT(ABS(tnu4(idsed(i))))
!        IF (Tnudg(idsed(i)).gt.0.0_r8) THEN
!           Tnudg(idsed(i))=1.0_r8/(Tnudg(idsed(i))*86400.0_r8)
!        ELSE
!           Tnudg(idsed(i))=0.0_r8
!        END IF
      END DO

      RETURN
      END SUBROUTINE read_sed_input
