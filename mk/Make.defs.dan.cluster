################################################################################
# Parallel SCHISM Makefile
#
# User makes environment settings for particular OS / PLATFORM / COMPILER / MPI
# below as well as setting flags having to do with included algorithms (e.g. sediment)
# and the compiler configuration (debug, timing). 
#
# The environment settings are based on the following options.
#
# Compiler name:
#   FCS: Serial compiler (for utilities)
#   FCP: Parallel compiler
#   FLD: Linker (in general same as parallel compiler)
#
# Compilation flags
#   FCSFLAGS: Flags for serial compilation
#   FCPFLAGS: Flags for parallel compilation (including all pre-processing flags)
#   FLDFLAGS: Flags for linker (e.g., -O2)
#
# Preprocessor flags:
#   DEBUG: Enable debugging code
#   ORDERED_SUM: Enable globally ordered sums & dot-products for bit reproducibility
#     of state quantities independent of number of processors (note: this can
#     significantly degrade performance);
#   INCLUDE_TIMING: Enable wallclock timing of code (note: this can have slight
#     effect on performance);
#   MPI_VERSION = 1 or 2: Version of MPI (try 2 first, if compile fails due to mpi
#     related errors then switch to version 1;
#
# Libraries (needed for parallel code)
#   MTSLIBS: Flags for linking ParMeTiS/MeTiS libaries
################################################################################

################################################################################
## Environment for KANGOO cluster in NSYSU
#################################################################################
ENV = KANGOO

################################################################################
# Environment 
################################################################################

FCP = mpif90
FLD = $(FCP)
# MPI vserion (1 or 2) 
PPFLAGS := $(PPFLAGS) -DMPIVERSION=2 #-DUSE_WRAP

FCPFLAGS = $(PPFLAGS) -O2 -Mlfs -tp=px #MPI code
FLDFLAGS = -O2 #for final linking of object files

  #####Libraries
MTSLIBS = -L$(PWD)/ParMetis-3.1-Sep2010 -lparmetis -lmetis
CDFLIBS = -L/opt/netcdf_pgi32/lib -lnetcdf
CDFMOD = -I/opt/netcdf_pgi32/include # modules for netcdf

################################################################################
# Alternate executable name if you do not want the default. 
################################################################################
EXEC   := pschism_$(ENV)

################################################################################
# Algorithm preference flags.
# Comment out unwanted modules and flags.
################################################################################

# -DSCHISM is always on and is defined elsewhere

# SURA project (remove afterwards)
#  USE_ADC = yes
#  EXEC := $(EXEC)_ADC

# Precip/evaporation model
# USE_PREC_EVAP = yes
# PPFLAGS := $(PPFLAGS) -DPREC_EVAP 
# EXEC := $(EXEC)_EVAP

# MM5 in heat exchange model
# USE_MM5 = yes
# PPFLAGS := $(PPFLAGS) -DMM5
# EXEC := $(EXEC)_MM5

# TVD limiter options (set as one of these: SB, VL, OS, MM)
# # No default and so these 2 lines should NOT be commented out!
  TVD_LIM = SB
  EXEC := $(EXEC)_$(TVD_LIM)

# GOTM turbulence closure model
# USE_GOTM = yes
# EXEC := $(EXEC)_GOTM

# Don't comment out the follow ifdef
ifdef USE_GOTM
  GTMMOD =   #modules
  GTMLIBS = 
else
  GTMMOD =
  GTMLIBS =
endif

# Wind wave model WWM
# USE_WWM = yes
# EXEC := $(EXEC)_WWM

# Implicit schemes in WWM needs PetSc
# USE_PETSC = yes
# EXEC := $(EXEC)_PETSC

# TIMOR 
# USE_TIMOR = yes
# EXEC := $(EXEC)_TIMOR

# Harmonic analysis tool
# USE_HA = yes
# EXEC := $(EXEC)_HA

##### Select only _one_ model from below

# Ecological model - NAPZD Spitz (internal use only)
# USE_NAPZD = yes
# EXEC := $(EXEC)_NAPZD

# Or:
# Ecological model (EcoSim)
# USE_ECO = yes
# EXEC := $(EXEC)_ECO

# Or:
# CE-QUAL-ICM
#USE_ICM = yes
#EXEC := $(EXEC)_ICM

# Or:
# Sediment model 
# USE_SED = yes
# EXEC := $(EXEC)_SED

#Or:
# Sediment model (2D)
# USE_SED2D = yes
# EXEC := $(EXEC)_SED2D

# Or:
# Oil spill model (not active)
# USE_OIL = yes
# EXEC := $(EXEC)_OIL

#########  Compiler configuration related flags

# Include a timer
# USE_TIMER = yes
# EXEC := $(EXEC)_TIMER

# Debug mode (more time consuming)
# USE_DEBUG = yes
# EXEC := $(EXEC)_DEBUG


######### Specialty compiler flags and workarounds

# Add -DNO_TR_15581 like below for allocatable array problem in sflux_subs.F90
# PPFLAGS := $(PPFLAGS) -DNO_TR_15581

# For openMPI compiler, search for "USE_OPEN64" below for compiler flags
USE_OPEN64 = no

# Obsolete flags: use USE_WRAP flag to avoid problems in ParMetis lib (calling C from FORTRAN)
# PPFLAGS := $(PPFLAGS) -DUSE_WRAP 

